i will share my all python script

#main.py

from imports import tk, tkFont, show_home_screen, show_delete_screen, show_import_screen,show_backup_screen



root = tk.Tk()

root.title("Data Interface")

root.geometry("800x600")



custom_font = tkFont.Font(family="Helvetica", size=10)  # Slightly larger font for better readability



button_frame = tk.Frame(root, width=120)  # Fixed width for the button frame

button_frame.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)



def switch_screen(screen_function):

    """Utility function to switch between screens smoothly"""

    for widget in main_frame.winfo_children():

        widget.destroy()

    screen_function(main_frame)



report_button = tk.Button(button_frame, text="HOME", command=lambda: switch_screen(show_home_screen), 

                         width=10, height=1, font=custom_font)  # Increased height for the buttons

report_button.pack(pady=10)



delete_button = tk.Button(button_frame, text="DELETE", command=lambda: switch_screen(show_delete_screen), 

                         width=10, height=1, font=custom_font)

delete_button.pack(pady=10)



import_button = tk.Button(button_frame, text="IMPORT", command=lambda: switch_screen(show_import_screen), 

                         width=10, height=1, font=custom_font)

import_button.pack(pady=10)



backup_button = tk.Button(button_frame, text="BACKUP", command=lambda: switch_screen(show_backup_screen), 

                         width=10, height=1, font=custom_font)

backup_button.pack(pady=10)



main_frame = tk.Frame(root)

main_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=10, pady=10)



# Initial screen:

show_home_screen(main_frame) 



root.mainloop()

#home_screen.py

from imports import tk, ttk, tkFont, DateEntry, pd, datetime, messagebox

from create_treeview import create_treeview_frame

# from search_body_no import search_by_body_no

from db_connection import get_db_collection

import os



def show_home_screen(main_frame):

    """

    This function creates and displays the "Home" screen within the provided main_frame.

    """

    # Clear existing widgets from the main_frame

    for widget in main_frame.winfo_children():

        widget.destroy()



    button_width = 15  # Set standard button width

    custom_font = tkFont.Font(family="Helvetica", size=10)  # Define a custom font



    def validate_integer(P):

        """

        Validates that the input is an integer.

        """

        if P.isdigit() or P == "":

            return True

        return False



    def on_body_no_entry_change(*args):

        """

        Prints the body number when it's changed and valid.

        """

        body_no = body_no_entry.get()

        if body_no.isdigit():

            return True



    # Register the validation command

    vcmd = (main_frame.register(validate_integer), '%P')



    # Body Number Search Section

    tk.Label(main_frame, text="Body Number:", font=custom_font).grid(row=0, column=1, padx=5, pady=5, sticky="e")

    body_no_entry = tk.Entry(main_frame, width=15, font=custom_font, validate="key", validatecommand=vcmd)  # Input field for body number

    body_no_entry.grid(row=0, column=2, padx=5, pady=5)

    body_no_entry.bind("<KeyRelease>", on_body_no_entry_change)

    

    def on_search_by_body_no_click():

        body_no = body_no_entry.get()

        if body_no:

            search_by_body_no(body_no, main_frame)

        else:

            messagebox.showerror("Error", "Please enter a Body Number")



    search_by_body_no_button = tk.Button(main_frame, text="Search By Body No.", width=button_width, font=custom_font, command=on_search_by_body_no_click)

    search_by_body_no_button.grid(row=0, column=4, padx=5, pady=5, sticky="e")



    # Date Range Search Section

    tk.Label(main_frame, text="Start Date:", font=custom_font).grid(row=1, column=0, padx=5, pady=5, sticky="w")

    start_date_entry = DateEntry(main_frame, width=15, font=custom_font, date_pattern='yyyy-mm-dd',

                                 background='darkblue', foreground='white', borderwidth=2, year=datetime.date.today().year)

    start_date_entry.grid(row=1, column=1, padx=5, pady=5)



    tk.Label(main_frame, text="End Date:", font=custom_font).grid(row=1, column=2, padx=5, pady=5, sticky="e")

    end_date_entry = DateEntry(main_frame, width=15, font=custom_font, date_pattern='yyyy-mm-dd',

                               background='darkblue', foreground='white', borderwidth=2, year=datetime.date.today().year)

    end_date_entry.grid(row=1, column=3, padx=5, pady=5)



    def search_date():

        start_date = start_date_entry.get()

        end_date = end_date_entry.get()

        print(start_date)



        if not start_date or not end_date:

            messagebox.showerror("Error", "Please select both start and end dates")

            return



        try:

            # Get the MongoDB collection

            collection = get_db_collection()



            # Query the database for records within the date range

            query = {"Insertion Date": {"$gte": start_date, "$lte": end_date}}

            cursor = collection.find(query)



            # Convert cursor to DataFrame

            df = pd.DataFrame(list(cursor))



            if df.empty:

                messagebox.showinfo("Info", "No records found for the selected date range")

                return

        

            # Save the DataFrame to a CSV file

            df.to_csv('temp/date_data.csv', index=False)



            # Update the treeview with the new data

            create_treeview_frame(main_frame, 'temp/date_data.csv')



        except Exception as e:

            messagebox.showerror("Error", f"An error occurred: {e}")



    search_by_date_button = tk.Button(main_frame, text="Search By Date", width=button_width, font=custom_font, command=search_date)

    search_by_date_button.grid(row=1, column=4, padx=5, pady=5, sticky="e")



    def export_data():

        start_date = start_date_entry.get()

        end_date = end_date_entry.get()



        if not start_date or not end_date:

            messagebox.showerror("Error", "Please select both start and end dates")

            return



        try:

            # Get the MongoDB collection

            collection = get_db_collection()



            # Query the database for records within the date range

            query = {"Insertion Date": {"$gte": start_date, "$lte": end_date}}

            cursor = collection.find(query)



            # Convert cursor to DataFrame

            df = pd.DataFrame(list(cursor))



            if df.empty:

                messagebox.showinfo("Info", "No records found for the selected date range")

                return



            # Filter the DataFrame to include only the specified columns

            columns_to_export = ["Date", "Time", "BODY", "COVER", "12T NB", "12T WB", "26T", "28T", "LPM", "WP1", "BP1", "BP2", "Noise", "Box No"]

            df = df[columns_to_export]



            # Ensure specific columns are strings and handle scientific notation

            string_columns = ['12T NB', '12T WB', '26T', '28T']

            for col in string_columns:

                df[col] = df[col].apply(lambda x: "{:.0E}".format(x).replace("+", "").replace(".0E", "E") if isinstance(x, (int, float)) else str(x))

            

            # Ensure 'Box No' column is an integer

            df['Box No'] = pd.to_numeric(df['Box No'], errors='coerce').fillna(0).astype(int)



            # Ensure the export directory exists

            export_dir = r'E:\project_3\16-07-2024\project\export'

            os.makedirs(export_dir, exist_ok=True)



            # Create the file paths with the current date

            current_date = datetime.date.today().strftime('%Y-%m-%d')

            csv_file_path = os.path.join(export_dir, f'{current_date}.csv')

            excel_file_path = os.path.join(export_dir, f'{current_date}.xlsx')



            # Save the DataFrame to a CSV file

            df.to_csv(csv_file_path, index=False)

            

            # Save the DataFrame to an Excel file

            df.to_excel(excel_file_path, index=False)



            # Show success message

            messagebox.showinfo("Success", f"Files exported successfully to:\n{csv_file_path}\n{excel_file_path}")



        except Exception as e:

            messagebox.showerror("Error", f"An error occurred: {e}")



    export_button = tk.Button(main_frame, text="Export", width=button_width, font=custom_font, command=export_data)

    export_button.grid(row=2, column=4, padx=5, pady=5, sticky="e")



    # Data Table (Treeview)

    file_path = r'E:\project_3\16-07-2024\project\temp\home_default_data.csv'

    treeview_frame = create_treeview_frame(main_frame, file_path)



    # Configure grid layout for resizing

    main_frame.grid_rowconfigure(3, weight=1)

    main_frame.grid_columnconfigure(4, weight=1)



def search_by_body_no(body_no, main_frame):

    # Get the MongoDB collection

    collection = get_db_collection()

    

    try:

        body_no_int = int(body_no)  # Convert body_no to integer

    except ValueError:

        messagebox.showerror("Error", "Body Number must be a number")

        return



    # Search for the body number

    query = {"BODY": body_no_int}

    results = list(collection.find(query))



    if not results:

        messagebox.showerror("Error", "No data found for the given Body Number")

        return



    # Save the results to a CSV file

    df = pd.DataFrame(results)

    file_path = r'E:\project_3\16-07-2024\project\temp\one_Search_data.csv'

    df.to_csv(file_path, index=False)



    # Clear existing treeview frame if it exists

    for widget in main_frame.grid_slaves(row=3, column=0):

        widget.destroy()



    # Create the treeview with the new data

    create_treeview_frame(main_frame, file_path)



#delete_screen.py

import pandas as pd

from imports import tk, ttk, tkFont, messagebox, simpledialog

from create_treeview import create_treeview_frame

# from search_body_no import search_by_body_no

from db_connection import get_db_collection,get_backup_db_collection





def backup_and_delete_body_no(body_no):

    """

    Deletes the document with the specified body number from the main collection,

    and then backs it up to a backup collection if the deletion is successful.

    """

    # Get the main MongoDB collection (assumed to default to avani_test and test)

    main_collection = get_db_collection()

    backup_collection=get_backup_db_collection()

    

    # # Manually get the backup collection using a separate connection

    # from pymongo import MongoClient

    # client = MongoClient("mongodb://localhost:27017/")

    # backup_collection = client["avani_backup"]["backup"]

    

    try:

        body_no_int = int(body_no)  # Convert body_no to integer

    except ValueError:

        messagebox.showerror("Error", "Body Number must be a number")

        return



    # Search for the document with the given body number

    query = {"BODY": body_no_int}

    document = main_collection.find_one(query)



    if not document:

        messagebox.showerror("Error", "No data found for the given Body Number")

        return



    try:

        # Delete the document from the main collection

        result = main_collection.delete_one(query)



        if result.deleted_count > 0:

            # Insert the document into the backup collection after successful deletion

            backup_collection.insert_one(document)

            messagebox.showinfo("Success", "Data deleted and backed up successfully!")

        else:

            messagebox.showerror("Error", "Failed to delete the document.")

    except Exception as e:

        messagebox.showerror("Error", f"An error occurred: {e}")



def show_delete_screen(main_frame):

    """

    This function creates and displays the "Delete" screen within the provided main_frame.

    """

    # Clear existing widgets in the main frame

    for widget in main_frame.winfo_children():

        widget.destroy()



    button_width = 15  # Consistent button width for aesthetics

    custom_font = tkFont.Font(family="Helvetica", size=10)  # Define custom font for visual consistency



    # Validate function to ensure only numbers are entered

    def validate_number(P):

        if P.isdigit() or P == "":

            return True

        return False



    # Register validate_number with Tkinter

    validate_cmd = main_frame.register(validate_number)



    # Body Number Search Section

    tk.Label(main_frame, text="Body Number:", font=custom_font).grid(row=0, column=2, padx=5, pady=5, sticky="e")

    body_no_entry = tk.Entry(main_frame, width=15, font=custom_font, validate="key", validatecommand=(validate_cmd, '%P'))

    body_no_entry.grid(row=0, column=3, padx=5, pady=5)

    

    def on_search_by_body_no_click():

        body_no = body_no_entry.get()

        if body_no:

            search_by_body_no(body_no, main_frame)

        else:

            messagebox.showerror("Error", "Please enter a Body Number")



    search_by_body_no_button = tk.Button(main_frame, text="Search By Body No.", width=button_width, font=custom_font, command=on_search_by_body_no_click)

    search_by_body_no_button.grid(row=0, column=4, padx=5, pady=5, sticky="e")

    

    # Data Table (Treeview)

    file_path = r'E:\project_3\16-07-2024\project\temp\delete_default_data.csv'

    treeview_frame = create_treeview_frame(main_frame, file_path)



    # Configure grid layout for resizing

    main_frame.grid_rowconfigure(3, weight=1)

    main_frame.grid_columnconfigure(4, weight=1)

    

    def on_delete_click():  

        """

        Handles the "Delete" button click. Prompts for a password and performs deletion if the password is correct.

        """

        body_no = body_no_entry.get()

        if not body_no:

            messagebox.showerror("Error", "Please enter a Body Number")

            return



        # Popup to get password

        password = simpledialog.askstring("Password", "Enter password:", show="*")  



        if password is None:  # This checks if the user clicked Cancel

            return  # Exit the function without any further action

        if password == "avadhut9":  # Replace with the actual password

            result = messagebox.askyesno("Confirm Delete", "Are you sure you want to delete?")

            if result:

                backup_and_delete_body_no(body_no)

            else:

                return  # Do nothing if the user cancels

        else:

            messagebox.showerror("Error", "Incorrect password!")



    # Delete Button (functionality implemented)

    delete_button = tk.Button(main_frame, text="Delete", width=button_width, font=custom_font, command=on_delete_click)  # Create the "Delete" button

    delete_button.grid(row=2, column=4, padx=5, pady=5, sticky="e")  # Position the button in the grid layout



def search_by_body_no(body_no, main_frame):

    # Get the MongoDB collection

    collection = get_db_collection()

    

    try:

        body_no_int = int(body_no)  # Convert body_no to integer

    except ValueError:

        messagebox.showerror("Error", "Body Number must be a number")

        return



    # Search for the body number

    query = {"BODY": body_no_int}

    results = list(collection.find(query))



    if not results:

        messagebox.showerror("Error", "No data found for the given Body Number")

        return



    # Save the results to a CSV file

    df = pd.DataFrame(results)

    file_path = r'E:\project_3\16-07-2024\project\temp\one_Search_data.csv'

    df.to_csv(file_path, index=False)



    # Clear existing treeview frame if it exists

    for widget in main_frame.grid_slaves(row=3, column=0):

        widget.destroy()



    # Create the treeview with the new data

    create_treeview_frame(main_frame, file_path)

#import_screen.py

import tkinter as tk

from db import insert_into_db

from update_box import update_box_data



def show_import_screen(parent_frame):

    # Clear any existing widgets in the frame

    for widget in parent_frame.winfo_children():

        widget.destroy()



    # Create and pack the "GEAR IMPORT" button

    gear_import_button = tk.Button(parent_frame, text="GEAR IMPORT", width=20, height=2, command=insert_into_db)

    gear_import_button.pack(pady=10)



    # Create and pack the "BOX IMPORT" button

    box_import_button = tk.Button(parent_frame, text="BOX IMPORT", width=20, height=2,command=update_box_data)

    box_import_button.pack(pady=10)

# imports.py

from tkinter import ttk  

import tkinter.font as tkFont

import tkinter as tk

from tkcalendar import DateEntry 

import tkinter.messagebox as messagebox

import tkinter.simpledialog as simpledialog

import pandas as pd

import datetime

from home_screen import show_home_screen  

from delete_screen import show_delete_screen 

from import_screen import show_import_screen   

from backup_screen import show_backup_screen 



#backup_screen.py

from imports import tk, ttk, tkFont, DateEntry, pd, datetime, messagebox

from create_treeview import create_treeview_frame

# from search_body_no import search_by_body_no

from db_connection import get_backup_db_collection

import os



def show_backup_screen(main_frame):

    """

    This function creates and displays the "Home" screen within the provided main_frame.

    """

    # Clear existing widgets from the main_frame

    for widget in main_frame.winfo_children():

        widget.destroy()



    button_width = 15  # Set standard button width

    custom_font = tkFont.Font(family="Helvetica", size=10)  # Define a custom font



    def validate_integer(P):

        """

        Validates that the input is an integer.

        """

        if P.isdigit() or P == "":

            return True

        return False



    def on_body_no_entry_change(*args):

        """

        Prints the body number when it's changed and valid.

        """

        body_no = body_no_entry.get()

        if body_no.isdigit():

            return True



    # Register the validation command

    vcmd = (main_frame.register(validate_integer), '%P')



    # Body Number Search Section

    tk.Label(main_frame, text="Body Number:", font=custom_font).grid(row=0, column=1, padx=5, pady=5, sticky="e")

    body_no_entry = tk.Entry(main_frame, width=15, font=custom_font, validate="key", validatecommand=vcmd)  # Input field for body number

    body_no_entry.grid(row=0, column=2, padx=5, pady=5)

    body_no_entry.bind("<KeyRelease>", on_body_no_entry_change)

    

    def on_search_by_body_no_click():

        body_no = body_no_entry.get()

        if body_no:

            search_by_body_no(body_no, main_frame)

        else:

            messagebox.showerror("Error", "Please enter a Body Number")



    search_by_body_no_button = tk.Button(main_frame, text="Search By Body No.", width=button_width, font=custom_font, command=on_search_by_body_no_click)

    search_by_body_no_button.grid(row=0, column=4, padx=5, pady=5, sticky="e")



    # Date Range Search Section

    tk.Label(main_frame, text="Start Date:", font=custom_font).grid(row=1, column=0, padx=5, pady=5, sticky="w")

    start_date_entry = DateEntry(main_frame, width=15, font=custom_font, date_pattern='yyyy-mm-dd',

                                 background='darkblue', foreground='white', borderwidth=2, year=datetime.date.today().year)

    start_date_entry.grid(row=1, column=1, padx=5, pady=5)



    tk.Label(main_frame, text="End Date:", font=custom_font).grid(row=1, column=2, padx=5, pady=5, sticky="e")

    end_date_entry = DateEntry(main_frame, width=15, font=custom_font, date_pattern='yyyy-mm-dd',

                               background='darkblue', foreground='white', borderwidth=2, year=datetime.date.today().year)

    end_date_entry.grid(row=1, column=3, padx=5, pady=5)



    def search_date():

        start_date = start_date_entry.get()

        end_date = end_date_entry.get()

        



        if not start_date or not end_date:

            messagebox.showerror("Error", "Please select both start and end dates")

            return



        try:

            # Get the MongoDB collection

            collection = get_backup_db_collection()



            # Query the database for records within the date range

            query = {"Insertion Date": {"$gte": start_date, "$lte": end_date}}

            cursor = collection.find(query)



            # Convert cursor to DataFrame

            df = pd.DataFrame(list(cursor))



            if df.empty:

                messagebox.showinfo("Info", "No records found for the selected date range")

                return

        

            # Save the DataFrame to a CSV file

            df.to_csv('temp/backup_date_data.csv', index=False)



            # Update the treeview with the new data

            create_treeview_frame(main_frame, 'temp/backup_date_data.csv')



        except Exception as e:

            messagebox.showerror("Error", f"An error occurred: {e}")



    search_by_date_button = tk.Button(main_frame, text="Search By Date", width=button_width, font=custom_font, command=search_date)

    search_by_date_button.grid(row=1, column=4, padx=5, pady=5, sticky="e")



    def export_data():

        start_date = start_date_entry.get()

        end_date = end_date_entry.get()



        if not start_date or not end_date:

            messagebox.showerror("Error", "Please select both start and end dates")

            return



        try:

            # Get the MongoDB collection

            collection = get_backup_db_collection()



            # Query the database for records within the date range

            query = {"Insertion Date": {"$gte": start_date, "$lte": end_date}}

            cursor = collection.find(query)



            # Convert cursor to DataFrame

            df = pd.DataFrame(list(cursor))



            if df.empty:

                messagebox.showinfo("Info", "No records found for the selected date range")

                return



            # Filter the DataFrame to include only the specified columns

            columns_to_export = ["Date", "Time", "BODY", "COVER", "12T NB", "12T WB", "26T", "28T", "LPM", "WP1", "BP1", "BP2", "Noise", "Box No"]

            df = df[columns_to_export]



            # Ensure specific columns are strings and handle scientific notation

            string_columns = ['12T NB', '12T WB', '26T', '28T']

            for col in string_columns:

                df[col] = df[col].apply(lambda x: "{:.0E}".format(x).replace("+", "").replace(".0E", "E") if isinstance(x, (int, float)) else str(x))

            

            # Ensure 'Box No' column is an integer

            df['Box No'] = pd.to_numeric(df['Box No'], errors='coerce').fillna(0).astype(int)



            # Ensure the export directory exists

            export_dir = r'E:\project_3\16-07-2024\project\backup-export'

            os.makedirs(export_dir, exist_ok=True)



            # Create the file paths with the current date

            current_date = datetime.date.today().strftime('%Y-%m-%d')

            csv_file_path = os.path.join(export_dir, f'{current_date}.csv')

            excel_file_path = os.path.join(export_dir, f'{current_date}.xlsx')



            # Save the DataFrame to a CSV file

            df.to_csv(csv_file_path, index=False)

            

            # Save the DataFrame to an Excel file

            df.to_excel(excel_file_path, index=False)



            # Show success message

            messagebox.showinfo("Success", f"Files exported successfully to:\n{csv_file_path}\n{excel_file_path}")



        except Exception as e:

            messagebox.showerror("Error", f"An error occurred: {e}")



    export_button = tk.Button(main_frame, text="Export", width=button_width, font=custom_font, command=export_data)

    export_button.grid(row=2, column=4, padx=5, pady=5, sticky="e")



    # Data Table (Treeview)

    file_path = r'E:\project_3\16-07-2024\project\temp\backup_default_data.csv'

    treeview_frame = create_treeview_frame(main_frame, file_path)



    # Configure grid layout for resizing

    main_frame.grid_rowconfigure(3, weight=1)

    main_frame.grid_columnconfigure(4, weight=1)





def search_by_body_no(body_no, main_frame):

    # Get the MongoDB collection

    collection = get_backup_db_collection()

    

    try:

        body_no_int = int(body_no)  # Convert body_no to integer

    except ValueError:

        messagebox.showerror("Error", "Body Number must be a number")

        return



    # Search for the body number

    query = {"BODY": body_no_int}

    results = list(collection.find(query))



    if not results:

        messagebox.showerror("Error", "No data found for the given Body Number")

        return



    # Save the results to a CSV file

    df = pd.DataFrame(results)

    file_path = r'E:\project_3\16-07-2024\project\temp\one_Search_data.csv'

    df.to_csv(file_path, index=False)



    # Clear existing treeview frame if it exists

    for widget in main_frame.grid_slaves(row=3, column=0):

        widget.destroy()



    # Create the treeview with the new data

    create_treeview_frame(main_frame, file_path)





#create_treeview.py

from imports import tk, ttk, tkFont,messagebox,simpledialog, pd



def create_treeview_frame(parent, file_path):

    # Load the CSV file

    data = pd.read_csv(file_path)

    

    # Select the specified columns

    selected_columns = ["Date", "Time", "BODY", "COVER", "12T NB", "12T WB", "26T", "28T", "LPM", "WP1", "BP1", "BP2", "Noise", "Box No"]

    data = data[selected_columns]

        # Ensure specific columns are strings and handle scientific notation

    string_columns = ['12T NB', '12T WB', '26T', '28T']

    for col in string_columns:

        data[col] = data[col].apply(lambda x: "{:.0E}".format(x).replace("+", "") if isinstance(x, (int, float)) else str(x))

    # Ensure 'Box No' column is an integer

    data['Box No'] = pd.to_numeric(data['Box No'], errors='coerce').fillna(0).astype(int)





    # Create a frame to hold the Treeview and scrollbars

    frame = ttk.Frame(parent)

    frame.grid(row=3, column=0, columnspan=5, padx=5, pady=5, sticky="nsew")



    # Create a Treeview widget

    tree = ttk.Treeview(frame, columns=selected_columns, show="headings")

    tree.grid(row=0, column=0, sticky="nsew")



    # Define the column headings and center the values

    for col in selected_columns:

        tree.heading(col, text=col, anchor=tk.CENTER)

        tree.column(col, width=100, anchor=tk.CENTER)



    # Insert the data into the Treeview

    for index, row in data.iterrows():

        tree.insert("", "end", values=list(row))



    # Create and pack the scrollbars

    vsb = ttk.Scrollbar(frame, orient="vertical", command=tree.yview)

    vsb.grid(row=0, column=1, sticky='ns')

    tree.configure(yscrollcommand=vsb.set)



    hsb = ttk.Scrollbar(frame, orient="horizontal", command=tree.xview)

    hsb.grid(row=1, column=0, sticky='ew')

    tree.configure(xscrollcommand=hsb.set)



    # Configure grid layout for resizing

    frame.grid_rowconfigure(0, weight=1)

    frame.grid_columnconfigure(0, weight=1)



    return frame

#db_connection.py

from pymongo import MongoClient



def get_db_collection():

    """

    Establishes a connection to the MongoDB database and returns the collection object.

    """

    client = MongoClient('mongodb://localhost:27017/')

    db = client['avani_test']

    collection = db['test']

    return collection

def get_backup_db_collection():

    """

    Establishes a connection to the MongoDB database and returns the collection object.

    """

    client = MongoClient('mongodb://localhost:27017/')

    db = client['avani_backup']

    collection = db['backup']

    return collection

#db.py

import tkinter as tk

import pandas as pd

from datetime import datetime

from tkinter import messagebox

from db_connection import get_db_collection



# Path to the uploaded Excel file

file_path = 'import/import_gear.xlsx'

output_file_path = 'temp/gear_data.csv'



# Expected columns based on the new specification

expected_columns = [

    'Date', 'Time', 'BODY', 'COVER', '12T NB', '12T WB', '26T', 

    '28T', 'LPM', 'WP1', 'BP1', 'BP2', 'Noise', 'Box No'

]



def load_data():

    # Load the Excel file

    data = pd.read_excel(file_path)



    # Ensure all expected columns are present, add missing ones with "NA" as string

    for column in expected_columns:

        if column not in data.columns:

            data[column] = "NA"



    # Reorder the DataFrame to match the expected columns sequence

    data = data[expected_columns]

    return data



def check_body_dup(data):

    """

    Check for duplicate BODY values in the data and against the MongoDB collection.

    """

    # Get the MongoDB collection

    collection = get_db_collection()



    # Check for duplicates within the new data

    duplicates_in_data = data.duplicated(subset=['BODY'], keep=False)

    duplicated_values_in_data = data[duplicates_in_data][['BODY']]



    # Check for duplicates against existing records in the database

    existing_records = list(collection.find({}, {'_id': 0, 'BODY': 1}))

    existing_df = pd.DataFrame(existing_records)



    # Ensure existing_df has the required columns

    if not existing_df.empty and 'BODY' in existing_df.columns:

        duplicates_in_db = data[data['BODY'].isin(existing_df['BODY'])]

    else:

        duplicates_in_db = pd.DataFrame()  # No duplicates in db if no matching columns



    # Collect all duplicated values for the message box

    duplicate_message = "Duplicate values found:\n"

    has_duplicates = False



    if duplicates_in_data.any():

        has_duplicates = True

        duplicate_message += "- Within the new data:\n"

        for index, row in duplicated_values_in_data.iterrows():

            duplicate_message += f"  BODY: {row['BODY']}\n"



    if not duplicates_in_db.empty:

        has_duplicates = True

        duplicate_message += "- Against existing records in the database:\n"

        for index, row in duplicates_in_db.iterrows():

            duplicate_message += f"  BODY: {row['BODY']}\n"



    if has_duplicates:

        # Initialize Tkinter root

        root = tk.Tk()

        root.withdraw()  # Hide the root window



        messagebox.showerror("Duplicate Entries Found", duplicate_message)

        root.destroy()  # Close the Tkinter root window

        

        return False



    return True



def insert_into_db(data=None):

    """

    Insert data into MongoDB after checking for duplicates.

    """

    if data is None:

        data = load_data()



    if not check_body_dup(data):

        return

    

    string_columns = ['12T NB', '12T WB', '26T', '28T']

    for col in string_columns:

        data[col] = data[col].apply(lambda x: "{:.0E}".format(x).replace("+", "") if isinstance(x, (int, float)) else str(x))

    

    # Ensure 'Box No' column is an integer

    data['Box No'] = pd.to_numeric(data['Box No'], errors='coerce').fillna(0).astype(int)



    # Get the current date and time

    current_datetime = datetime.now()



    # Add 'Insertion Date' and 'Insertion Time' columns

    data['Insertion Date'] = current_datetime.date().isoformat()

    data['Insertion Time'] = current_datetime.time().isoformat()



    # Save the DataFrame to a CSV file

    data.to_csv(output_file_path, index=False)



    # Convert DataFrame to a list of dictionaries

    data_dict = data.to_dict(orient='records')



    # Get the MongoDB collection

    collection = get_db_collection()



    # Insert the data into the collection

    collection.insert_many(data_dict)



    # Show a popup message indicating successful import

    root = tk.Tk()

    root.withdraw()  # Hide the root window

    messagebox.showinfo("Success", "Gear import successful")

    root.destroy()  # Close the Tkinter root window



    print(f"Data inserted successfully into MongoDB and saved to {output_file_path}.")

# insert_into_db()

#update_box.py

import pandas as pd

from pymongo import MongoClient

from db_connection import get_db_collection

import tkinter as tk

from tkinter import messagebox

excel_file_path = r"E:\project_3\16-07-2024\project\import\import_box.xlsx"



def load_data():

    # Load the Excel file

    data = pd.read_excel(excel_file_path)

    return data

def update_box_data(data=None):

    if data is None:

        data = load_data()



    # Convert 'Box No' column to numeric, coerce errors to NaN, and fill NaN with 0

    data['Box No'] = pd.to_numeric(data['Box No'], errors='coerce').fillna(0).astype(int)



    # Get the MongoDB collection

    collection = get_db_collection()



    # Iterate over the DataFrame rows and update the MongoDB collection

    for index, row in data.iterrows():

        body = row["BODY"]

        box_no = row["Box No"]  # Box No is already an integer



        # Update all documents in the collection where BODY matches

        collection.update_many(

            {"BODY": body},

            {"$set": {"Box No": box_no}}

        )

    # Show a popup message indicating successful import

    root = tk.Tk()

    root.withdraw()  # Hide the root window

    messagebox.showinfo("Success", "Box No import successful")

    root.destroy()  # Close the Tkinter root window

    print("Box data updated successfully.")



read all code and rewrite all code with name of file and inhance code without disturbing functionality and working
create python scripts if necessary